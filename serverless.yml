service: AMDb-graphql-api

custom:
  secrets: ${file(config.json)}
  userTableName: ${self:provider.stage}-users
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
      
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
package:
  exclude:
    - client/**
    - .dynamodb/**
provider:
  name: aws
  runtime: nodejs12.x
  region: ap-south-1
  stage: ${opt:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource:
        - Fn::Join:
            - ""
            - - "arn:aws:dynamodb:${self:provider.region}:"
              - Ref: AWS::AccountId
              - ":table/${self:custom.userTableName}"
  environment:
    GRAPHQL_ENDPOINT: ${self:custom.secrets.graphqlEndpoint.${self:provider.stage}}
    MOVIES_API_KEY: ${self:custom.secrets.moviesAPIKey.${self:provider.stage}}
    USER_TABLE_NAME: ${self:custom.userTableName}
    SLS_DEBUG: false
  stackTags:
    environment: ${self:provider.stage}
    service: ${self:service}
    generatedBy: serverless

functions:
  graphql:
    handler: functions/graphql/index.graphqlHandler
    events:
      - http:
          path: graphql
          method: get
      - http:
          path: graphql
          method: post
          cors: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-dynamodb-local
  - serverless-offline